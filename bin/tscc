#!/bin/bash
set -eu
source "$(realpath $(dirname $(realpath "${BASH_SOURCE[0]}"))/../)/tscc.env"

#
# Ensure environment
#

if ! command -v jq >/dev/null; then
	echo "Error: jq is required to use tscc." 1>&2
	exit 1
fi

if [ ! -d "${TSCC_DEPS_PATH}" ]; then
	mkdir -p "${TSCC_DEPS_PATH}"
fi

tscc_download() {
  echo "Downloading ${1}..."
	wget -qO "$2" "$1"
}

tscc_ensureNode() {
  if [ ! -f "${TSCC_NODE_PATH}" ]; then
		cd $(mktemp -d)
    local downloadUrl="https://nodejs.org/dist/v${TSCC_NODE_VERSION}/${TSCC_NODE_IDENTIFIER}-${TSCC_PLATFORM}.tar.gz"
    if ! tscc_download "${downloadUrl}" "node.tar.gz"; then
      echo "Failed to download node from \"${downloadUrl}\""
      exit 1
    fi
    tar xzf "node.tar.gz"
    rm "node.tar.gz"
    mv "${TSCC_NODE_IDENTIFIER}-${TSCC_PLATFORM}/bin/node" "${TSCC_NODE_PATH}"
    rm -rf "${TSCC_NODE_IDENTIFIER}"
		cd - > /dev/null
  fi
}

tscc_ensureTypeScript() {
  if [ ! -d "${TSCC_TYPESCRIPT_PATH}" ]; then
		cd $(mktemp -d)
    local downloadUrl="https://github.com/microsoft/TypeScript/releases/download/v${TSCC_TYPESCRIPT_VERSION}/typescript-${TSCC_TYPESCRIPT_VERSION}.tgz"
    if ! tscc_download "${downloadUrl}" "typescript.tgz"; then
      echo "Failed to download TypeScript from \"${downloadUrl}\""
      exit 1
    fi
    tar xzf "typescript.tgz"		
    rm "typescript.tgz"
    mv "package" "${TSCC_TYPESCRIPT_PATH}"
		cd - > /dev/null
  fi
}

tscc_ensureESBuild() {
  if [ ! -f "${TSCC_ESBUILD_PATH}" ]; then
		cd $(mktemp -d)
    local downloadUrl="https://esbuild.github.io/dl/v${TSCC_ESBUILD_VERSION}"
    if ! tscc_download "${downloadUrl}" "esbuild.sh"; then
      echo "Failed to download esbuild from \"${downloadUrl}\""
      exit 1
    fi
    sh "esbuild.sh"
    mv "esbuild" "${TSCC_ESBUILD_PATH}"
		cd - > /dev/null
  fi
}

tscc_ensureNode
tscc_ensureTypeScript
tscc_ensureESBuild

#
# 
#

TSCC_TMP_PATH="${PWD}/.tscc"
mkdir -p "${TSCC_TMP_PATH}"

TSCC_TSCONFIG="$(
	sed 's/^ *\/\/.*//' ${TSCC_PATH}/tsconfig.json | # Load tsconfig.json and remove comments
	sed '/^[[:space:]]*$/d' # Remove empty lines
)"
TSCC_POSITIONAL_ARGS=()
TSCC_TSC_FLAGS="-p ${TSCC_TMP_PATH}/tsconfig.json"
TSCC_ESBUILD_FLAGS="--bundle --format=esm --jsx=automatic"
TSCC_ESBUILD_OUTFILE=""

tscc_writeTsConfig() {
	TSCC_TSCONFIG="// This file was generated by tscc.
${TSCC_TSCONFIG}
"
	echo "${TSCC_TSCONFIG}" > "${TSCC_TMP_PATH}/tsconfig.json"
}

tscc_invokeTsc() {
	"${TSCC_NODE_PATH}" "${TSCC_TYPESCRIPT_PATH}/lib/tsc.js" ${TSCC_TSC_FLAGS}
}

tscc_invokeESBuild() {
	"${TSCC_ESBUILD_PATH}" ${TSCC_POSITIONAL_ARGS} ${TSCC_ESBUILD_FLAGS} --outfile=${TSCC_ESBUILD_OUTFILE}
}

while [[ $# -gt 0 ]]; do
  case $1 in
    --help)
			exit 0
			;;
		
		--init)
			tscc_writeTsConfig

			TSCONFIG_JSON="{
	\"extends\": [\"./.tscc/tsconfig.json\"],
  \"compilerOptions\": {
    \"baseUrl\": \".\"
  },
  \"include\": [\"**/*.ts\", \"**/*.tsx\"]
}"

			echo "${TSCONFIG_JSON}" > "${PWD}/tsconfig.json"
			exit 0
			;;

		--jsx)
			shift
			TSCC_TSCONFIG="$(
				echo ${TSCC_TSCONFIG} |
				jq ".compilerOptions.jsx |= \"${1}\""
			)"
			shift
			;;

		--jsxFactory)
			shift
			TSCC_TSCONFIG="$(
				echo ${TSCC_TSCONFIG} |
				jq ".compilerOptions.jsxFactory |= \"${1}\""
			)"
			shift
			;;

		--jsxFragmentFactory)
			shift
			TSCC_TSCONFIG="$(
				echo ${TSCC_TSCONFIG} |
				jq ".compilerOptions.jsxFragmentFactory |= \"${1}\""
			)"
			shift
			;;

		--minify)
			shift
			TSCC_ESBUILD_FLAGS+=" --minify"
			;;
		
		-o|--output)
			shift
			TSCC_ESBUILD_OUTFILE=$1
			shift
      ;;

		--path)
			shift
			TSCC_ARG_PATH_NAME="$(echo $1 | cut -d ':' -f 1)"
			TSCC_ARG_PATH_PATH="$(echo $1 | cut -d ':' -f 2)"
			shift

			TSCC_TSCONFIG="$(
				echo ${TSCC_TSCONFIG} |
				jq ".compilerOptions.paths[\"${TSCC_ARG_PATH_NAME}\"] |= [\"$(realpath ${TSCC_ARG_PATH_PATH})\"]"
			)"
			;;
		
		--sourcemap)
			shift
			TSCC_ESBUILD_FLAGS+=" --sourcemap"
			;;

		--version)
			echo "tscc: ${TSCC_VERSION}"
			echo "node: ${TSCC_NODE_VERSION}"
			echo "TypeScript: ${TSCC_TYPESCRIPT_VERSION}"
			echo "esbuild: ${TSCC_ESBUILD_VERSION}"
      exit 0
      ;;	
    
		-*|--*)
      echo "Unknown option $1"
      exit 1
      ;;
    
		*)
      TSCC_TSCONFIG="$(
				echo ${TSCC_TSCONFIG} |
				jq ".include |= .+ [\"$(realpath $1)\"]" # Add to include
			)"
			TSCC_POSITIONAL_ARGS+=("$(realpath $1)")
      shift
      ;;
  esac
done

tscc_writeTsConfig
tscc_invokeTsc
tscc_invokeESBuild
